generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model MainSliderData {
  id Int @id @default(autoincrement())

  title    String?
  text     String?
  link     Link?
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Link {
  id Int @id @default(autoincrement())

  name String
  href String

  mainSliderData   MainSliderData? @relation(fields: [mainSliderDataId], references: [id])
  mainSliderDataId Int?            @unique

  quote   Quote? @relation(fields: [quoteId], references: [id])
  quoteId Int?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Quote {
  id Int @id @default(autoincrement())

  author   String
  text     String
  imageUrl String?

  link Link?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Department {
  id Int @id @default(autoincrement())

  name             String
  imageUrl         String
  shortDescription String

  departmentItem DepartmentItem?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model DepartmentItem {
  id Int @id @default(autoincrement())

  bigImageUrl       String?
  topDescription    String
  bottomDescription String?

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id Int @id @default(autoincrement())

  name             String
  imageUrl         String
  shortDescription String

  postItem PostItem?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PostItem {
  id Int @id @default(autoincrement())

  bigImageUrl String?
  description String

  post   Post @relation(fields: [postId], references: [id])
  postId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TitlesSection {
  id Int @id @default(autoincrement())

  name     String
  href     String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Image {
  id Int @id @default(autoincrement())

  name String

  imageItem ImageItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ImageItem {
  id Int @id @default(autoincrement())

  imageUrl String
  image    Image  @relation(fields: [imageId], references: [id])
  imageId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Direction {
  id Int @id @default(autoincrement())

  role     String
  fullName String
  phone    BigInt
  email    String
  order    Int    @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TeachStaff {
  id Int @id @default(autoincrement())

  role     String
  fullName String
  order    Int    @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model File {
  id Int @id @default(autoincrement())

  category Int
  name     String
  href     String
  iconUrl  String @default("/assets/blue-file.svg")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PaidEducation {
  id Int @id @default(autoincrement())

  department String
  duration   String
  making     String
  price      BigInt
  comment    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Professionals {
  id Int @id @default(autoincrement())

  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model NpEducation {
  id Int @id @default(autoincrement())

  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
